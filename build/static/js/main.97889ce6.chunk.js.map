{"version":3,"sources":["Actions/index.js","Components/Search.js","Secrets.js","Components/MovieItem.js","Components/MoviesResults.js","Components/App.js","serviceWorker.js","reducers/index.js","reducers/movies_reducer.js","index.js"],"names":["MOVIES","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","_this2","url","concat","console","log","fetch","method","then","response","json","jsonObj","movies","results","_this3","react_default","a","createElement","Form","inline","className","FormGroup","FormControl","type","placeholder","onChange","event","setState","target","value","Button","bsStyle","onClick","search","Component","connect","items","MovieItem","favorited","src","movie","poster_path","alt","title","overview","release_date","aria-hidden","vote_average","displayFav","MovieResults","Components_Search","map","item","Components_MovieItem","key","id","App","MoviesResults","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","__REDUX_DEVTOOLS_EXTENSION","ReactDOM","render","es","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97889ce6.chunk.js","sourcesContent":["export const MOVIES = \"MOVIES\";\n\nexport function movies(items){\n  const action = {\n    type: MOVIES,\n    items\n  }\n  return action;\n}","import React, { Component } from 'react';\nimport { Form, FormControl, FormGroup,  Button } from 'react-bootstrap'\nimport { API_KEY } from '../Secrets'\nimport { movies } from '../Actions'\nimport { connect } from 'react-redux'\n\nclass Search extends Component {\n  constructor(props){\n    super(props);\n\n    this.state ={\n      query: ''\n    };\n    \n  }\n  search(){\n    let url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${this.state.query}`\n    console.log(url);\n    fetch(url,{\n      method: 'GET'\n    }).then(response=> response.json())\n    .then(jsonObj =>  {this.props.movies(jsonObj.results)});\n  }\n  render(){\n    return (\n     <div>\n      <Form inline className=\"col-md-12 col-md-offset-4\">\n        <FormGroup>\n        {''}\n          <FormControl\n          type=\"text\"\n          placeholder=\"Will's Movies\"\n          onChange={(event) =>this.setState({query: event.target.value})}\n          />\n          {''}\n          <Button bsStyle=\"success text-center\"\n          onClick={() =>this.search()}>\n          Submit</Button>\n        </FormGroup>\n      </Form>\n     </div>\n    )\n  }\n}\n\nexport default connect(null, { movies }) (Search);","export const API_KEY = \"7075b84d7a366d07155c781517df8b0e\"","import React, { Component } from 'react'\nconst urlComponent = \"https://image.tmdb.org/t/p/w342\";\n\n\nclass MovieItem extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      favorited: false\n    };\n  }\n\n  displayFav(){\n    if(!this.state.favorited){\n      return <span className=\"fa-heart-empty\"\n      onClick={() => this.setState({favorited: !this.state.favorited})}></span>\n    } else {\n      return <span className=\"fa-heart\"\n      onClick={() => this.setState({favorited: !this.state.favorited})}></span>\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"col-sm-12 col-sm-3\">\n      <div className=\"thumbnail\">\n      <img src={urlComponent+this.props.movie.poster_path} alt=\"\"/>\n      <div className=\"caption\">\n      <h3>{this.props.movie.title}</h3>\n      <p>{this.props.movie.overview}</p>\n      <p>Release Date - {this.props.movie.release_date}</p>\n      <p>Ratings - <span className=\"badge badge-default\"><span className=\"glyphicon glyphicon-star\" aria-hidden=\"true\">{this.props.movie.vote_average}</span></span></p>\n      <p>{this.displayFav()}</p>\n      </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default MovieItem;","import React, { Component } from 'react';\nimport Search from './Search';\nimport { connect } from 'react-redux';\nimport MovieItem from './MovieItem'\n\nclass MovieResults extends Component{\n  render(){\n    return(\n      <div>\n      <h1 className=\"text-center\">Movie Results</h1>\n      <Search />\n      {this.props.movies.map(item => {\n        return <MovieItem movie={item} key={item.id}/>;\n      })}\n      </div>\n    )\n  }\n}\nfunction mapStateToProps(state){\n  console.log(state)\n  return {\n    movies: state.movies\n  }\n}\n\nexport default connect(mapStateToProps, null)(MovieResults);","import React, { Component } from 'react';\nimport MoviesResults from './MoviesResults'\nimport css from '../index.css'\nclass App extends Component {\n  render(){\n  return (\n\n  <div className=\"container\">\n  <div className=\"row text-center\">\n  <div className=\"jumbotron\">\n  <h1>Hello, world!</h1>\n  <p>William's Movies</p>\n</div>\n</div>\n    <div className=\"row\">\n      <MoviesResults/>\n    </div>\n</div>\n  );\n}\n}\nexport default App;\n\n\n// The Movie DB API","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import movies from './movies_reducer';\n\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n  movies\n});\nexport default rootReducer","import { MOVIES } from '../Actions';\n\nexport default function movies(state = [], action){\n  switch(action.type){\n    case MOVIES:\n      console.log(\"Movies are \",action.items);\n      return action.items;\n      default:\n        return state;\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer,\nwindow.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION\n);\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n\n</Provider>  \n, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}